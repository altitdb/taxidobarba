{"version":3,"sources":["./src/app/monthly/monthly.page.html","./src/app/monthly/monthly.module.ts","./src/app/monthly/monthly.page.scss","./src/app/monthly/monthly.page.ts","./src/app/monthly/monthly.service.ts"],"names":[],"mappings":"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","file":"monthly-monthly-module.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-menu-button></ion-menu-button>\\n    </ion-buttons>\\n    <ion-title>\\n      Taxi do Barba\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <ion-item>\\n    <ion-label>Período</ion-label>\\n  <ion-datetime display-format=\\\"MM/YYYY\\\" picker-format=\\\"MM/YYYY\\\" [(ngModel)]=\\\"datetime\\\" (ionChange)=\\\"filterDate()\\\"></ion-datetime>\\n  </ion-item>\\n  <ion-grid>\\n    <ion-row>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        Data\\n      </ion-col>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        Tipo\\n      </ion-col>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        Motorista\\n      </ion-col>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        Valor\\n      </ion-col>\\n      <ion-col class=\\\"ion-text-center\\\">\\n        Editar\\n      </ion-col>\\n    </ion-row>\\n    <ion-row *ngFor=\\\"let item of report\\\">\\n      <ion-item-divider color=\\\"light\\\">\\n        <ion-col class=\\\"ion-text-center\\\">\\n          {{ item.date }}\\n        </ion-col>\\n        <ion-col class=\\\"ion-text-center\\\">\\n          {{ item.type }}\\n        </ion-col>\\n        <ion-col class=\\\"ion-text-center\\\">\\n          {{ item.id === null ? '' : item.driver.split(\\\" \\\")[0] }}\\n        </ion-col>\\n        <ion-col class=\\\"ion-text-end\\\">\\n          {{ item.value }}\\n        </ion-col>\\n        <ion-col class=\\\"ion-text-center\\\">\\n          <ion-button (click)=\\\"update(item.id, item.type)\\\" [disabled]=\\\"item.id === null\\\">\\n            <ion-icon slot=\\\"icon-only\\\" name=\\\"create\\\"></ion-icon>\\n          </ion-button>\\n        </ion-col>\\n      </ion-item-divider>\\n    </ion-row>\\n  </ion-grid>\\n  <ion-item>\\n    <div class=\\\"ion-text-end\\\">\\n      Valor Bruto {{ amount.grossValue }}\\n    </div>\\n  </ion-item>\\n  <ion-item>\\n    <div class=\\\"ion-text-end\\\">\\n      Total Líquido {{ amount.netValue }}\\n    </div>\\n  </ion-item>\\n</ion-content>\\n\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MonthlyPage } from './monthly.page';\nimport { MonthlyService } from './monthly.service';\nimport { HttpClientModule } from '@angular/common/http';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MonthlyPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    HttpClientModule\n  ],\n  declarations: [MonthlyPage],\n  providers: [\n    MonthlyService\n  ]\n})\nexport class MonthlyPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vbnRobHkvbW9udGhseS5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { MonthlyService } from './monthly.service';\nimport * as moment from 'moment';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-monthly',\n  templateUrl: './monthly.page.html',\n  styleUrls: ['./monthly.page.scss'],\n})\nexport class MonthlyPage implements OnInit {\n\n  datetime: string = new Date().toISOString();\n  report: Array<MonthlyReportItem>;\n  amount: Amount;\n\n  constructor(private _monthlyService: MonthlyService,\n    private _router: Router) { }\n\n  ngOnInit() {\n    this.getDrivers();\n  }\n\n  getDrivers() {\n    const month = moment(this.datetime).format(\"MM\");\n    const year = moment(this.datetime).format(\"YYYY\");\n    this._monthlyService.get(month, year)\n       .subscribe(suc => {\n          this.report = suc.report;\n          this.amount = suc.amount;\n        });\n  }\n\n  update(id, type) {\n    if (type === 'CITY') {\n      this._router.navigateByUrl(`/city/${id}`);\n    } else if (type === 'TRAVEL') {\n      this._router.navigateByUrl(`/travel/${id}`);\n    } else if (type === 'FUEL') {\n      this._router.navigateByUrl(`/fuel/${id}`);\n    }\n  }\n\n  filterDate() {\n    this.getDrivers();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonthlyService {\n\n  private url = environment.baseUrl + '/api/v1/monthly-report';\n\n  constructor(private _httpClient: HttpClient) { }\n\n  public get(month, year) {\n    return this._httpClient.get<MonthlyReport>(this.url + \"?month=\" + month + \"&year=\" + year);\n  }\n\n}\n"],"sourceRoot":"webpack:///"}